const countries = ['Finland', 'Sweden', 'Denmark', 'Norway', 'IceLand']
const names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const products = [
  { product: 'banana', price: 3 },
  { product: 'mango', price: 6 },
  { product: 'potato', price: ' ' },
  { product: 'avocado', price: 8 },
  { product: 'coffee', price: 10 },
  { product: 'tea', price: '' },
]

const callback = (n) => {
    return n ** 2
}
//countries.forEach((elemrnt) => {console.log(elemrnt)})
//names.forEach((elemrnt) => {console.log(elemrnt)})
//numbers.forEach((elemrnt) => {console.log(elemrnt)})
const countriesToUpperCase = countries.map((country) => country.toUpperCase())
console.log(countriesToUpperCase)
const countriesLength = countries.map((country) => country.length)
console.log(countriesLength)
const numbersToSquare = numbers.map((number) => number ** 2)
console.log(numbersToSquare)
const countriesWithLand = countries.filter((country) => country.endsWith('land'))
console.log(countriesWithLand)
const countriesWIthSixChar = countries.filter((country) => country.length > 6)
console.log(countriesWIthSixChar)
function getStringLists(arr) {
    return arr.filter(item => typeof item === 'string');
}
  
const mixedArray = [1, 'hello', true, 'world', 42, 'JavaScript', null, 'function'];
const stringArray = getStringLists(mixedArray)
console.log(stringArray)

const sumOfNums = numbers.reduce((a, b) => a + b, 0)
console.log(sumOfNums)
  
const sentence = countries.reduce((accumulator, country, index, array) => {
    if (index === 0) {
      return country;
    } else if (index === array.length - 1) {
      return accumulator + ', and ' + country;
    } else {
      return accumulator + ', ' + country;
    }
}, '');

const finalSentence = sentence + 'are north European Countries'
console.log(finalSentence)
const areSomeGreat = names.some((n) => n.length > 7)
console.log(areSomeGreat)

const containLand = countries.every((country) => country.includes('land'))
console.log(containLand)

const totalPrices = products
.filter(product => typeof product.price === 'number' && !isNaN(product.price))
.map(product => product.price)
.reduce((acc, price) => acc + price, 0)

console.log(totalPrices)

const totalPrice = products.reduce((acc, product) => {
    const price = parseFloat(product.price);
    return !isNaN(price) ? acc + price : acc;
}, 0);
  
console.log(totalPrice)

function categorizeCountries(pattern) {
    return countries.filter(country => country.toLowerCase().includes(pattern.toLowerCase()))
}
console.log(categorizeCountries('land'))

function countCountriesByStartingLetter() {
    const letterCounts = {}
    countries.forEach(country => {
        const firstLetter = country[0].toUpperCase()
        if (letterCounts[firstLetter]) {
            letterCounts[firstLetter]++
        } else {
            letterCounts[firstLetter] = 1
        }
        return Object.entries(letterCounts).map(([letter, count]) => ({ letter, count }));
    })
}
console.log(countCountriesByStartingLetter())

const getFirstThreeCountries = arr => {
    return arr.slice(0, 3)
}
console.log(getFirstThreeCountries(countries))
const lastThreeCountries = arr => {
    return arr.splice(2, 5)
}
console.log(lastThreeCountries(countries))
// Using different functional programming methods
const getFirstTenCountriesFunctional = (arr) => {
    return arr.filter((_, index) => index < 10);
};

/*
const findMostFrequentInitial = (countries) => {
  const initialCount = {};

  // Count the occurrences of each initial letter
  countries.forEach(country => {
    const initial = country[0];
    if (initialCount[initial]) {
      initialCount[initial]++;
    } else {
      initialCount[initial] = 1;
    }
  });

  // Find the initial letter with the highest count
  let maxCount = 0;
  let mostFrequentInitial = '';

  for (const initial in initialCount) {
    if (initialCount[initial] > maxCount) {
      maxCount = initialCount[initial];
      mostFrequentInitial = initial;
    }
  }

  return mostFrequentInitial;
};

const mostFrequentInitial = findMostFrequentInitial(countries);
console.log(`The most frequent initial is: ${mostFrequentInitial}`);
*/

const countriess = [
    {
      name: 'Afghanistan',
      capital: 'Kabul',
      population: 27657145
    },
    {
      name: 'Albania',
      capital: 'Tirana',
      population: 2886026
    },
    {
      name: 'Algeria',
      capital: 'Algiers',
      population: 40400000
    },
    {
      name: 'Andorra',
      capital: 'Andorra la Vella',
      population: 78014
    },
    {
      name: 'Angola',
      capital: 'Luanda',
      population: 25868000
    },
    // Add more countries as needed
];
  
const sortByName = (countriess) => {
    return countriess.sort((a, b) => {
      if (a.name < b.name) return -1;
      if (a.name > b.name) return 1;
      return 0;
    });
};
  
const sortByCapital = (countriess) => {
    return countriess.sort((a, b) => {
      if (a.capital < b.capital) return -1;
      if (a.capital > b.capital) return 1;
      return 0;
    });
};
  
const sortByPopulation = (countriess) => {
    return countriess.sort((a, b) => a.population - b.population);
};
  
console.log("Sorted by Name:");
console.log(sortByName([...countriess])); // Using spread operator to avoid modifying the original array
  
console.log("Sorted by Capital:");
console.log(sortByCapital([...countriess]));
  
console.log("Sorted by Population:");
console.log(sortByPopulation([...countriess]));

const nations = [
    { country: 'China', population: 1377422166 },
    { country: 'India', population: 1295210000 },
    { country: 'United States of America', population: 323947000 },
    { country: 'Indonesia', population: 258705000 },
    { country: 'Brazil', population: 206135893 },
    { country: 'Pakistan', population: 194125062 },
    { country: 'Nigeria', population: 186988000 },
    { country: 'Bangladesh', population: 161006790 },
    { country: 'Russian Federation', population: 146599183 },
    { country: 'Japan', population: 126960000 }
    // Add more countries as needed
];

const mostPopulatedCountries = (nations, n) => {
    return nations
    .sort((a, b) => b.population - a.population)
    .slice(0, n)
}
console.log(mostPopulatedCountries(countries, 10))
console.log(mostPopulatedCountries(countries, 3))

const statistics = {
    data: [],
  
    setData: function (arr) {
      this.data = arr;
    },
  
    count: function () {
      return this.data.length;
    },
  
    sum: function () {
      return this.data.reduce((acc, val) => acc + val, 0);
    },
  
    min: function () {
      return Math.min(...this.data);
    },
  
    max: function () {
      return Math.max(...this.data);
    },
  
    range: function () {
      return this.max() - this.min();
    },
  
    mean: function () {
      return this.sum() / this.count();
    },
  
    median: function () {
      const sorted = [...this.data].sort((a, b) => a - b);
      const mid = Math.floor(sorted.length / 2);
      return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;
    },
  
    mode: function () {
      const freqMap = {};
      this.data.forEach(val => {
        freqMap[val] = (freqMap[val] || 0) + 1;
      });
      const maxCount = Math.max(...Object.values(freqMap));
      const modes = Object.keys(freqMap).filter(key => freqMap[key] === maxCount);
      return { mode: parseInt(modes[0]), count: maxCount };
    },
  
    var: function () {
      const mean = this.mean();
      const variance = this.data.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / this.count();
      return variance;
    },
  
    std: function () {
      return Math.sqrt(this.var());
    },
  
    freqDist: function () {
      const freqMap = {};
      this.data.forEach(val => {
        freqMap[val] = (freqMap[val] || 0) + 1;
      });
      return Object.entries(freqMap).map(([key, value]) => [(value / this.count()) * 100, parseInt(key)]);
    },
  
    describe: function () {
      return `
        Count: ${this.count()}
        Sum: ${this.sum()}
        Min: ${this.min()}
        Max: ${this.max()}
        Range: ${this.range()}
        Mean: ${this.mean()}
        Median: ${this.median()}
        Mode: (${this.mode().mode}, ${this.mode().count})
        Variance: ${this.var()}
        Standard Deviation: ${this.std()}
        Frequency Distribution: ${JSON.stringify(this.freqDist())}
      `;
    }
};
  
// Example usage:
const ages = [31, 26, 34, 37, 27, 26, 32, 32, 26, 27, 27, 24, 32, 33, 27, 25, 26, 38, 37, 31, 34, 24, 33, 29, 26];
statistics.setData(ages);
console.log('Count:', statistics.count());
console.log('Sum:', statistics.sum());
console.log('Min:', statistics.min());
console.log('Max:', statistics.max());
console.log('Range:', statistics.range());
console.log('Mean:', statistics.mean());
console.log('Median:', statistics.median());
console.log('Mode:', statistics.mode());
console.log('Variance:', statistics.var());
console.log('Standard Deviation:', statistics.std());
console.log('Frequency Distribution:', statistics.freqDist());
console.log(statistics.describe());
  